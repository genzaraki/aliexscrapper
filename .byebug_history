exit
@filename
exit
@filename
@url
@pages_list
@page_list
url
continue
url
continue
contiue
url
exit
@pages_list
continue
@pages_list
url
continue
url
@pages_list
continue
url
@pages_list
continue
url
@pages_list
continue
@pages_list
url
exit
@url
@page_next
@pages_list
exit
@page_next
@page_current
@pages_list
exit
@page_current
@pages_list
@page_next
@url
@page_previous
exit
@page_previous
@pages_list.nil?
continue
exit
self
@page_current
get_index(@url)
@page_next
@pages_parsed
@pages_list[0]
@pages_list
@url
@page_current
index
continue
@pages_parsed
@pages_list
self
scrapper
continue
scrapper
self
exit
scrapper
srapper
exit
self
@pages_list.count
continue
@pages_parsed.count
@pages_parsed
continue
@pages_list
exit
self
exit
self
exit
self
@pages_parsed
@pages_list
exit
@pages
self
@pages_list
@pages_list.is_a?Array
exit
@pages_list.is_a?Array
@pages_list
continue
@pages
@page_current
@page_next
continue
@pages
exit
@pages[:list].is_a?Array
@pages[:list]
continue
@pages
exit
PAGES
@url
self
scrapper
PAGES
@categories
PAGES[:list].count
exit
PAGES[:list].count
exit
PAGES[:list].count
exit
@url
PAGES
exit
PAGES
is_new_element?(element[:link])
element[:link]
exit
is_new_element?(element[:link])
is_new_element?(@url)
@url
exit
@url
exit
k[:link] == url
url
k[:link]
k
exit
ELEMENTS
continue
ELEMENTS
element
is_new_element?(element[:link])
exit
is_new_element?(element[:link])
exit
is_new_element?(element[:link])
element[:link]
element
element[:url]
continue
element[:url]
is_new_element?(element[:url])
exit
@file.each do |f| p f.meta end
exit
@elements
@file
exit
continue
@url
continue
PAGES
exit
PAGES
exit
scrapper.PAGES
exit
scrapper.PAGES
exit
PAGES
scrapper.PAGES[:list]
scrapper.url
scrapper.PAGES
PAGES
Pages
continue
scrapper.is_parsing?
exit
scrapper.parsing
scrapper.is_parsing?
exit
scrapper.is_parsing?
exit
scrapper.is_parsing?
continue
PAGES[:list]
exit
PAGES[:list]
PAGES
continue
@pages
exit
@pages
exit
@pages
exit
@pages
exit
@jobs.count
exit
conitnue
continue
exit
element
continue
element
continue
element
continue
@jobs.count
@jobs
continue
element
continue
element
exit
element
continue
exit
element
exit
continue
element
continue
element
continue
conitnue
element
continue
element
continue
article
continue
element
continue
element
continue
element
continue
element
continue
article
element
continue
element
continue
data.css('article').count
data
list
continue
@jobs
list
continue
list
continue
list
@jobs
